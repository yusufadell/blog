<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://yusufadell.github.io/</id><title>Yusuf Adel</title><subtitle>A blog to share idead i read from a book, an article ot tools i've been using which i found interesting to sahre with you.</subtitle> <updated>2022-11-09T10:26:40+02:00</updated> <author> <name>Yusuf Adel</name> <uri>https://yusufadell.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://yusufadell.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://yusufadell.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Yusuf Adel </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Instance Static Class Methods in a Nutshell</title><link href="https://yusufadell.github.io/posts/static-class-method-in-nutshell/" rel="alternate" type="text/html" title="Instance Static Class Methods in a Nutshell" /><published>2022-02-13T00:00:00+02:00</published> <updated>2022-02-13T00:00:00+02:00</updated> <id>https://yusufadell.github.io/posts/static-class-method-in-nutshell/</id> <content src="https://yusufadell.github.io/posts/static-class-method-in-nutshell/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"gttps://github.com/yusufadell"}</name> </author> <category term="Python" /> <summary> Instance - Static - Class Methods instance - static - class and propetry methods python class MyClass: # obj = MyClass # Same as MyClass().method(obj) def method(the_object): return 'instance method called' the_object @classmethod def classmethod(the_class): return 'class method called' the_class @staticmethod def staticmethod(): return '... </summary> </entry> <entry><title>Inheritance in a NutShell!</title><link href="https://yusufadell.github.io/posts/Inheritance-in-a-NutShell/" rel="alternate" type="text/html" title="Inheritance in a NutShell!" /><published>2022-02-06T00:00:00+02:00</published> <updated>2022-02-06T00:00:00+02:00</updated> <id>https://yusufadell.github.io/posts/Inheritance-in-a-NutShell/</id> <content src="https://yusufadell.github.io/posts/Inheritance-in-a-NutShell/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://yusufadell.web.app"}</name> </author> <category term="Programming" /> <summary> Inheritance is a technique for code reuse. It lets you create child classes that inherit the methods of their parent classes. You can override the methods to provide new code for them but also use the super() function to call the original methods in the parent class. A child class has an “is a” relationship with its parent class, because an object of the child class is a kind of object of the p... </summary> </entry> <entry><title>Why not to use Inheritance</title><link href="https://yusufadell.github.io/posts/Why-not-to-use-inthereiance/" rel="alternate" type="text/html" title="Why not to use Inheritance" /><published>2022-01-31T00:00:00+02:00</published> <updated>2022-01-31T00:00:00+02:00</updated> <id>https://yusufadell.github.io/posts/Why-not-to-use-inthereiance/</id> <content src="https://yusufadell.github.io/posts/Why-not-to-use-inthereiance/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://yusufadell.web.app"}</name> </author> <category term="Programming" /> <summary> It’s easy to overengineer your classes using inheritance. As Luciano Ramalho states, “Placing objects in a neat hierarchy appeals to our sense of order; programmers do it just for fun.” We’ll create classes, subclasses, and sub-subclasses when a single class, or a couple of functions in a mod- ule, would achieve the same effect. But recall the Zen of Python tenet in Chapter 6 that simple is bet... </summary> </entry> <entry><title>Method and Decorators (Part 1)</title><link href="https://yusufadell.github.io/posts/Methods-and-Decorators/" rel="alternate" type="text/html" title="Method and Decorators (Part 1)" /><published>2022-01-24T00:00:00+02:00</published> <updated>2022-01-24T00:00:00+02:00</updated> <id>https://yusufadell.github.io/posts/Methods-and-Decorators/</id> <content src="https://yusufadell.github.io/posts/Methods-and-Decorators/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://yusufadell.web.app"}</name> </author> <category term="Programming" /> <summary> Method and Decorators Python’s decorators are a handy way to modify functions. Decorators were first introduced in Python 2.2, with the classmethod() and staticmethod() decorators, but were overhauled to become more flexible and readable. Along with these two original decorators, Python now provides a few right out of the box and supports the simple creation of custom decorators. But it seems ... </summary> </entry> <entry><title>When you don't know what you don't know!</title><link href="https://yusufadell.github.io/posts/When-you-don-t-know-what-you-don-t-know/" rel="alternate" type="text/html" title="When you don't know what you don't know!" /><published>2022-01-17T00:00:00+02:00</published> <updated>2022-01-17T00:00:00+02:00</updated> <id>https://yusufadell.github.io/posts/When-you-don-t-know-what-you-don-t-know/</id> <content src="https://yusufadell.github.io/posts/When-you-don-t-know-what-you-don-t-know/" /> <author> <name>{"name"=>"Yusuf Adel", "link"=>"https://yusufadell.web.app"}</name> </author> <category term="Programming" /> <summary> There’s a certain class of problems that kind of fascinates me and I’d describe them as not knowing what you don’t know. You could say it’s involuntary ignorance or unawaren There’s a certain class of problems that kind of fascinates me and I’d describe them as not knowing what you don’t know. You could say it’s involuntary ignorance or unawareness of common knowledge. It’s something that yo... </summary> </entry> </feed>
